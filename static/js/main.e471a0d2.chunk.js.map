{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/api.ts","App.tsx","index.tsx"],"names":["PostsList","posts","handleSelectPost","selectedPost","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","selectedPostId","handleAddComment","useState","name","email","body","form","setForm","errorMsg","setErrorMsg","isLoading","setIsLoading","onFieldChange","e","target","value","prevState","handleSubmit","event","a","preventDefault","trim","length","Error","onSubmit","htmlFor","placeholder","onChange","PostDetails","isCommentError","isCommentsLoading","comments","handleDelete","canWriteAComment","setCanWriteAComment","comment","href","UserSelector","users","handleSelectUser","selectedUser","isSelectOpened","setIsSelectOpened","role","user","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","addComment","postId","App","setUsers","setSelectedUser","userPosts","setUserPosts","setSelectedPost","isError","setIsError","isCommentLoading","setIsCommentLoading","setComments","setisCommentError","canWriteComment","setCanWriteComment","useEffect","getUserPostFromServer","userId","getUsersPosts","catch","finally","getCommentsFromServer","getUsersComments","handleAddNewComment","newComment","filteredComments","filter","currentComment","currentPost","commentId","deleteComment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e471a0d2.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  handleSelectPost: (post: Post) => void;\n  selectedPost: Post | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  handleSelectPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map((post) => (\n          <tr data-cy=\"Post\">\n            <td data-cy=\"PostId\">\n              {post.id}\n            </td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames('button', 'is-link', {\n                  'is-light': selectedPost?.id !== post.id,\n                })}\n                onClick={() => handleSelectPost(post)}\n              >\n                {selectedPost?.id === post.id ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  selectedPostId: number;\n  handleAddComment: (\n    postId: number,\n    name: string,\n    email: string,\n    body: string,\n  ) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  handleAddComment,\n}) => {\n  const [form, setForm] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [errorMsg, setErrorMsg] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onFieldChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    setForm((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!form.name.trim()) {\n      setErrorMsg('Name is required');\n\n      return;\n    }\n\n    if (!form.email.trim()) {\n      setErrorMsg('Email is required');\n\n      return;\n    }\n\n    if (!form.body.trim()) {\n      setErrorMsg('Comment text is required');\n\n      return;\n    }\n\n    if (form.name.trim().length\n      && form.email.trim().length\n      && form.body.trim().length) {\n      try {\n        setIsLoading(true);\n\n        await handleAddComment(\n          selectedPostId,\n          form.name,\n          form.email,\n          form.body,\n        );\n        setForm({\n          name: '',\n          email: '',\n          body: '',\n        });\n      } catch {\n        throw new Error();\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const handleClear = () => {\n    setForm({\n      name: '',\n      email: '',\n      body: '',\n    });\n    setErrorMsg('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': errorMsg && !form.name.trim(),\n            })}\n            value={form.name}\n            onChange={onFieldChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorMsg && !form.name.trim() && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorMsg && !form.name.trim() && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={form.email}\n            className={classNames('input', {\n              'is-danger': errorMsg && !form.email.trim(),\n            })}\n            onChange={onFieldChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorMsg && !form.email.trim() && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorMsg && !form.email.trim() && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': errorMsg && !form.body.trim(),\n            })}\n            onChange={onFieldChange}\n          />\n        </div>\n\n        {errorMsg && !form.body.trim() && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  isCommentError: boolean;\n  isCommentsLoading: boolean;\n  comments: Comment[] | null;\n  handleDelete: (commentId: number) => void;\n  setCanWriteAComment: React.Dispatch<React.SetStateAction<boolean>>;\n  canWriteAComment: boolean;\n  handleAddComment: (\n    postId: number,\n    name: string,\n    email: string,\n    body: string,\n  ) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isCommentError,\n  isCommentsLoading,\n  comments,\n  handleDelete,\n  canWriteAComment,\n  setCanWriteAComment,\n  handleAddComment,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && !isCommentError && <Loader />}\n\n          {isCommentError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments?.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments && !isCommentsLoading && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map((comment) => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!canWriteAComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setCanWriteAComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {canWriteAComment && (\n          <NewCommentForm\n            selectedPostId={selectedPost.id}\n            handleAddComment={handleAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  handleSelectUser: (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => void;\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  handleSelectUser,\n  selectedUser,\n}) => {\n  const [isSelectOpened, setIsSelectOpened] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsSelectOpened(!isSelectOpened)}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isSelectOpened && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map((user) => (\n              <a\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                key={user.id}\n                onClick={(event) => {\n                  handleSelectUser(event, user);\n                  setIsSelectOpened(false);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUsersPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getUsersComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport {\n  addComment,\n  deleteComment,\n  getUsers,\n  getUsersComments,\n  getUsersPosts,\n} from './api/api';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentError, setisCommentError] = useState(false);\n  const [canWriteComment, setCanWriteComment] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const getUserPostFromServer = (userId: number) => {\n    setIsLoading(true);\n\n    getUsersPosts(userId)\n      .then((data) => {\n        setUserPosts(data);\n        setIsError(false);\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  const getCommentsFromServer = (postId: number) => {\n    setIsCommentLoading(true);\n\n    getUsersComments(postId)\n      .then((data) => {\n        setComments(data);\n        setisCommentError(false);\n      })\n      .catch(() => setisCommentError(true))\n      .finally(() => {\n        setIsLoading(false);\n        setIsCommentLoading(false);\n      });\n  };\n\n  const handleUserSelect = (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => {\n    event.preventDefault();\n\n    getUserPostFromServer(user.id);\n    setSelectedUser(user);\n    setSelectedPost(null);\n  };\n\n  const handleSelectPost = (post: Post) => {\n    setSelectedPost((currentPost) => {\n      if (currentPost?.id === post.id) {\n        return null;\n      }\n\n      return post;\n    });\n\n    getCommentsFromServer(post.id);\n    setCanWriteComment(false);\n  };\n\n  const handleAddNewComment = async (\n    postId: number,\n    name: string,\n    email: string,\n    body: string,\n  ) => {\n    const newComment = await addComment(postId, name, email, body);\n\n    const filteredComments\n      = comments.filter((currentComment) => {\n        return selectedPost?.id === currentComment.postId;\n      });\n\n    setComments([...filteredComments, newComment]);\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    const filteredComments\n      = comments.filter(currentComment => {\n        return currentComment.id !== commentId;\n      });\n\n    setComments(filteredComments);\n    deleteComment(commentId);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  handleSelectUser={handleUserSelect}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isError && !isLoading && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!userPosts.length\n                  && selectedUser\n                  && !isLoading\n                  && !isError\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {userPosts.length > 0 && !isLoading && (\n                  <PostsList\n                    handleSelectPost={handleSelectPost}\n                    posts={userPosts}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  isCommentError={isCommentError}\n                  isCommentsLoading={isCommentLoading}\n                  handleAddComment={handleAddNewComment}\n                  handleDelete={handleDeleteComment}\n                  canWriteAComment={canWriteComment}\n                  setCanWriteAComment={setCanWriteComment}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}